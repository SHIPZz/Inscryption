//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherDrawCardRequest;

    public static Entitas.IMatcher<GameEntity> DrawCardRequest {
        get {
            if (_matcherDrawCardRequest == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.DrawCardRequest);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherDrawCardRequest = matcher;
            }

            return _matcherDrawCardRequest;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Features.Turn.DrawCardRequest drawCardRequest { get { return (Code.Features.Turn.DrawCardRequest)GetComponent(GameComponentsLookup.DrawCardRequest); } }
    public bool hasDrawCardRequest { get { return HasComponent(GameComponentsLookup.DrawCardRequest); } }

    public GameEntity AddDrawCardRequest(int newPlayerId) {
        var index = GameComponentsLookup.DrawCardRequest;
        var component = (Code.Features.Turn.DrawCardRequest)CreateComponent(index, typeof(Code.Features.Turn.DrawCardRequest));
        component.PlayerId = newPlayerId;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceDrawCardRequest(int newPlayerId) {
        var index = GameComponentsLookup.DrawCardRequest;
        var component = (Code.Features.Turn.DrawCardRequest)CreateComponent(index, typeof(Code.Features.Turn.DrawCardRequest));
        component.PlayerId = newPlayerId;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveDrawCardRequest() {
        RemoveComponent(GameComponentsLookup.DrawCardRequest);
        return this;
    }
}
