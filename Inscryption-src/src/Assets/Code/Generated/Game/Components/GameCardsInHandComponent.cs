//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherCardsInHand;

    public static Entitas.IMatcher<GameEntity> CardsInHand {
        get {
            if (_matcherCardsInHand == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.CardsInHand);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherCardsInHand = matcher;
            }

            return _matcherCardsInHand;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Features.Hero.CardsInHand cardsInHand { get { return (Code.Features.Hero.CardsInHand)GetComponent(GameComponentsLookup.CardsInHand); } }
    public System.Collections.Generic.List<int> CardsInHand { get { return cardsInHand.Value; } }
    public bool hasCardsInHand { get { return HasComponent(GameComponentsLookup.CardsInHand); } }

    public GameEntity AddCardsInHand(System.Collections.Generic.List<int> newValue) {
        var index = GameComponentsLookup.CardsInHand;
        var component = (Code.Features.Hero.CardsInHand)CreateComponent(index, typeof(Code.Features.Hero.CardsInHand));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceCardsInHand(System.Collections.Generic.List<int> newValue) {
        var index = GameComponentsLookup.CardsInHand;
        var component = (Code.Features.Hero.CardsInHand)CreateComponent(index, typeof(Code.Features.Hero.CardsInHand));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveCardsInHand() {
        RemoveComponent(GameComponentsLookup.CardsInHand);
        return this;
    }
}
