//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherPlaceCardRequest;

    public static Entitas.IMatcher<GameEntity> PlaceCardRequest {
        get {
            if (_matcherPlaceCardRequest == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.PlaceCardRequest);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherPlaceCardRequest = matcher;
            }

            return _matcherPlaceCardRequest;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Features.Turn.PlaceCardRequest placeCardRequest { get { return (Code.Features.Turn.PlaceCardRequest)GetComponent(GameComponentsLookup.PlaceCardRequest); } }
    public bool hasPlaceCardRequest { get { return HasComponent(GameComponentsLookup.PlaceCardRequest); } }

    public GameEntity AddPlaceCardRequest(int newCardId, int newSlotId) {
        var index = GameComponentsLookup.PlaceCardRequest;
        var component = (Code.Features.Turn.PlaceCardRequest)CreateComponent(index, typeof(Code.Features.Turn.PlaceCardRequest));
        component.CardId = newCardId;
        component.SlotId = newSlotId;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplacePlaceCardRequest(int newCardId, int newSlotId) {
        var index = GameComponentsLookup.PlaceCardRequest;
        var component = (Code.Features.Turn.PlaceCardRequest)CreateComponent(index, typeof(Code.Features.Turn.PlaceCardRequest));
        component.CardId = newCardId;
        component.SlotId = newSlotId;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemovePlaceCardRequest() {
        RemoveComponent(GameComponentsLookup.PlaceCardRequest);
        return this;
    }
}
