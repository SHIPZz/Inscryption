//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherStatusTarget;

    public static Entitas.IMatcher<GameEntity> StatusTarget {
        get {
            if (_matcherStatusTarget == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.StatusTarget);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherStatusTarget = matcher;
            }

            return _matcherStatusTarget;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Features.Statuses.Components.StatusTarget statusTarget { get { return (Code.Features.Statuses.Components.StatusTarget)GetComponent(GameComponentsLookup.StatusTarget); } }
    public int StatusTarget { get { return statusTarget.Value; } }
    public bool hasStatusTarget { get { return HasComponent(GameComponentsLookup.StatusTarget); } }

    public GameEntity AddStatusTarget(int newValue) {
        var index = GameComponentsLookup.StatusTarget;
        var component = (Code.Features.Statuses.Components.StatusTarget)CreateComponent(index, typeof(Code.Features.Statuses.Components.StatusTarget));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceStatusTarget(int newValue) {
        var index = GameComponentsLookup.StatusTarget;
        var component = (Code.Features.Statuses.Components.StatusTarget)CreateComponent(index, typeof(Code.Features.Statuses.Components.StatusTarget));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveStatusTarget() {
        RemoveComponent(GameComponentsLookup.StatusTarget);
        return this;
    }
}
