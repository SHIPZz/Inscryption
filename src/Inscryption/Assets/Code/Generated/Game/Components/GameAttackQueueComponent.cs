//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherAttackQueue;

    public static Entitas.IMatcher<GameEntity> AttackQueue {
        get {
            if (_matcherAttackQueue == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.AttackQueue);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherAttackQueue = matcher;
            }

            return _matcherAttackQueue;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Features.Turn.AttackQueue attackQueue { get { return (Code.Features.Turn.AttackQueue)GetComponent(GameComponentsLookup.AttackQueue); } }
    public bool hasAttackQueue { get { return HasComponent(GameComponentsLookup.AttackQueue); } }

    public GameEntity AddAttackQueue(System.Collections.Generic.List<Code.Features.Turn.QueuedAttack> newAttacks) {
        var index = GameComponentsLookup.AttackQueue;
        var component = (Code.Features.Turn.AttackQueue)CreateComponent(index, typeof(Code.Features.Turn.AttackQueue));
        component.Attacks = newAttacks;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceAttackQueue(System.Collections.Generic.List<Code.Features.Turn.QueuedAttack> newAttacks) {
        var index = GameComponentsLookup.AttackQueue;
        var component = (Code.Features.Turn.AttackQueue)CreateComponent(index, typeof(Code.Features.Turn.AttackQueue));
        component.Attacks = newAttacks;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveAttackQueue() {
        RemoveComponent(GameComponentsLookup.AttackQueue);
        return this;
    }
}
