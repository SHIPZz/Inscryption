//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherStatusValue;

    public static Entitas.IMatcher<GameEntity> StatusValue {
        get {
            if (_matcherStatusValue == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.StatusValue);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherStatusValue = matcher;
            }

            return _matcherStatusValue;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Features.Statuses.Components.StatusValue statusValue { get { return (Code.Features.Statuses.Components.StatusValue)GetComponent(GameComponentsLookup.StatusValue); } }
    public int StatusValue { get { return statusValue.Value; } }
    public bool hasStatusValue { get { return HasComponent(GameComponentsLookup.StatusValue); } }

    public GameEntity AddStatusValue(int newValue) {
        var index = GameComponentsLookup.StatusValue;
        var component = (Code.Features.Statuses.Components.StatusValue)CreateComponent(index, typeof(Code.Features.Statuses.Components.StatusValue));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceStatusValue(int newValue) {
        var index = GameComponentsLookup.StatusValue;
        var component = (Code.Features.Statuses.Components.StatusValue)CreateComponent(index, typeof(Code.Features.Statuses.Components.StatusValue));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveStatusValue() {
        RemoveComponent(GameComponentsLookup.StatusValue);
        return this;
    }
}
