//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherUpdateHandLayoutRequest;

    public static Entitas.IMatcher<GameEntity> UpdateHandLayoutRequest {
        get {
            if (_matcherUpdateHandLayoutRequest == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.UpdateHandLayoutRequest);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherUpdateHandLayoutRequest = matcher;
            }

            return _matcherUpdateHandLayoutRequest;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Features.Cards.Components.UpdateHandLayoutRequest updateHandLayoutRequest { get { return (Code.Features.Cards.Components.UpdateHandLayoutRequest)GetComponent(GameComponentsLookup.UpdateHandLayoutRequest); } }
    public bool hasUpdateHandLayoutRequest { get { return HasComponent(GameComponentsLookup.UpdateHandLayoutRequest); } }

    public GameEntity AddUpdateHandLayoutRequest(int newPlayerId) {
        var index = GameComponentsLookup.UpdateHandLayoutRequest;
        var component = (Code.Features.Cards.Components.UpdateHandLayoutRequest)CreateComponent(index, typeof(Code.Features.Cards.Components.UpdateHandLayoutRequest));
        component.PlayerId = newPlayerId;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceUpdateHandLayoutRequest(int newPlayerId) {
        var index = GameComponentsLookup.UpdateHandLayoutRequest;
        var component = (Code.Features.Cards.Components.UpdateHandLayoutRequest)CreateComponent(index, typeof(Code.Features.Cards.Components.UpdateHandLayoutRequest));
        component.PlayerId = newPlayerId;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveUpdateHandLayoutRequest() {
        RemoveComponent(GameComponentsLookup.UpdateHandLayoutRequest);
        return this;
    }
}
