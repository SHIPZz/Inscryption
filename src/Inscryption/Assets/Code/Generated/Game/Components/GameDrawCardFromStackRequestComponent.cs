//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherDrawCardFromStackRequest;

    public static Entitas.IMatcher<GameEntity> DrawCardFromStackRequest {
        get {
            if (_matcherDrawCardFromStackRequest == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.DrawCardFromStackRequest);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherDrawCardFromStackRequest = matcher;
            }

            return _matcherDrawCardFromStackRequest;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Features.Cards.DrawCardFromStackRequest drawCardFromStackRequest { get { return (Code.Features.Cards.DrawCardFromStackRequest)GetComponent(GameComponentsLookup.DrawCardFromStackRequest); } }
    public bool hasDrawCardFromStackRequest { get { return HasComponent(GameComponentsLookup.DrawCardFromStackRequest); } }

    public GameEntity AddDrawCardFromStackRequest(int newStackId, int newOwnerId) {
        var index = GameComponentsLookup.DrawCardFromStackRequest;
        var component = (Code.Features.Cards.DrawCardFromStackRequest)CreateComponent(index, typeof(Code.Features.Cards.DrawCardFromStackRequest));
        component.StackId = newStackId;
        component.OwnerId = newOwnerId;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceDrawCardFromStackRequest(int newStackId, int newOwnerId) {
        var index = GameComponentsLookup.DrawCardFromStackRequest;
        var component = (Code.Features.Cards.DrawCardFromStackRequest)CreateComponent(index, typeof(Code.Features.Cards.DrawCardFromStackRequest));
        component.StackId = newStackId;
        component.OwnerId = newOwnerId;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveDrawCardFromStackRequest() {
        RemoveComponent(GameComponentsLookup.DrawCardFromStackRequest);
        return this;
    }
}
