//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherDamageAnimator;

    public static Entitas.IMatcher<GameEntity> DamageAnimator {
        get {
            if (_matcherDamageAnimator == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.DamageAnimator);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherDamageAnimator = matcher;
            }

            return _matcherDamageAnimator;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Features.Statuses.Components.DamageAnimator damageAnimator { get { return (Code.Features.Statuses.Components.DamageAnimator)GetComponent(GameComponentsLookup.DamageAnimator); } }
    public Code.Features.Statuses.Services.IDamageAnimator DamageAnimator { get { return damageAnimator.Value; } }
    public bool hasDamageAnimator { get { return HasComponent(GameComponentsLookup.DamageAnimator); } }

    public GameEntity AddDamageAnimator(Code.Features.Statuses.Services.IDamageAnimator newValue) {
        var index = GameComponentsLookup.DamageAnimator;
        var component = (Code.Features.Statuses.Components.DamageAnimator)CreateComponent(index, typeof(Code.Features.Statuses.Components.DamageAnimator));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceDamageAnimator(Code.Features.Statuses.Services.IDamageAnimator newValue) {
        var index = GameComponentsLookup.DamageAnimator;
        var component = (Code.Features.Statuses.Components.DamageAnimator)CreateComponent(index, typeof(Code.Features.Statuses.Components.DamageAnimator));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveDamageAnimator() {
        RemoveComponent(GameComponentsLookup.DamageAnimator);
        return this;
    }
}
