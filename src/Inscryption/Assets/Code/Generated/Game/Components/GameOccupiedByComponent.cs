//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherOccupiedBy;

    public static Entitas.IMatcher<GameEntity> OccupiedBy {
        get {
            if (_matcherOccupiedBy == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.OccupiedBy);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherOccupiedBy = matcher;
            }

            return _matcherOccupiedBy;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Features.Board.OccupiedBy occupiedBy { get { return (Code.Features.Board.OccupiedBy)GetComponent(GameComponentsLookup.OccupiedBy); } }
    public int OccupiedBy { get { return occupiedBy.Value; } }
    public bool hasOccupiedBy { get { return HasComponent(GameComponentsLookup.OccupiedBy); } }

    public GameEntity AddOccupiedBy(int newValue) {
        var index = GameComponentsLookup.OccupiedBy;
        var component = (Code.Features.Board.OccupiedBy)CreateComponent(index, typeof(Code.Features.Board.OccupiedBy));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceOccupiedBy(int newValue) {
        var index = GameComponentsLookup.OccupiedBy;
        var component = (Code.Features.Board.OccupiedBy)CreateComponent(index, typeof(Code.Features.Board.OccupiedBy));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveOccupiedBy() {
        RemoveComponent(GameComponentsLookup.OccupiedBy);
        return this;
    }
}
