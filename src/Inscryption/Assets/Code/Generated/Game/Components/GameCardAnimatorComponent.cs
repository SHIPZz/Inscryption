//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherCardAnimator;

    public static Entitas.IMatcher<GameEntity> CardAnimator {
        get {
            if (_matcherCardAnimator == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.CardAnimator);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherCardAnimator = matcher;
            }

            return _matcherCardAnimator;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Features.Cards.CardAnimatorComponent cardAnimator { get { return (Code.Features.Cards.CardAnimatorComponent)GetComponent(GameComponentsLookup.CardAnimator); } }
    public Code.Features.Cards.CardAnimator CardAnimator { get { return cardAnimator.Value; } }
    public bool hasCardAnimator { get { return HasComponent(GameComponentsLookup.CardAnimator); } }

    public GameEntity AddCardAnimator(Code.Features.Cards.CardAnimator newValue) {
        var index = GameComponentsLookup.CardAnimator;
        var component = (Code.Features.Cards.CardAnimatorComponent)CreateComponent(index, typeof(Code.Features.Cards.CardAnimatorComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceCardAnimator(Code.Features.Cards.CardAnimator newValue) {
        var index = GameComponentsLookup.CardAnimator;
        var component = (Code.Features.Cards.CardAnimatorComponent)CreateComponent(index, typeof(Code.Features.Cards.CardAnimatorComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveCardAnimator() {
        RemoveComponent(GameComponentsLookup.CardAnimator);
        return this;
    }
}
