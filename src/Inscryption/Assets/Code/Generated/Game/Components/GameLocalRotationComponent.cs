//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherLocalRotation;

    public static Entitas.IMatcher<GameEntity> LocalRotation {
        get {
            if (_matcherLocalRotation == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.LocalRotation);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherLocalRotation = matcher;
            }

            return _matcherLocalRotation;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Common.LocalRotation localRotation { get { return (Code.Common.LocalRotation)GetComponent(GameComponentsLookup.LocalRotation); } }
    public UnityEngine.Quaternion LocalRotation { get { return localRotation.Value; } }
    public bool hasLocalRotation { get { return HasComponent(GameComponentsLookup.LocalRotation); } }

    public GameEntity AddLocalRotation(UnityEngine.Quaternion newValue) {
        var index = GameComponentsLookup.LocalRotation;
        var component = (Code.Common.LocalRotation)CreateComponent(index, typeof(Code.Common.LocalRotation));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceLocalRotation(UnityEngine.Quaternion newValue) {
        var index = GameComponentsLookup.LocalRotation;
        var component = (Code.Common.LocalRotation)CreateComponent(index, typeof(Code.Common.LocalRotation));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveLocalRotation() {
        RemoveComponent(GameComponentsLookup.LocalRotation);
        return this;
    }
}
