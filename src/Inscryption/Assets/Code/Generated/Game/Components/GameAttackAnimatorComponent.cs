//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherAttackAnimator;

    public static Entitas.IMatcher<GameEntity> AttackAnimator {
        get {
            if (_matcherAttackAnimator == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.AttackAnimator);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherAttackAnimator = matcher;
            }

            return _matcherAttackAnimator;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Features.Statuses.Components.AttackAnimatorComponent attackAnimator { get { return (Code.Features.Statuses.Components.AttackAnimatorComponent)GetComponent(GameComponentsLookup.AttackAnimator); } }
    public Code.Common.Visuals.IAttackAnimator AttackAnimator { get { return attackAnimator.Value; } }
    public bool hasAttackAnimator { get { return HasComponent(GameComponentsLookup.AttackAnimator); } }

    public GameEntity AddAttackAnimator(Code.Common.Visuals.IAttackAnimator newValue) {
        var index = GameComponentsLookup.AttackAnimator;
        var component = (Code.Features.Statuses.Components.AttackAnimatorComponent)CreateComponent(index, typeof(Code.Features.Statuses.Components.AttackAnimatorComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceAttackAnimator(Code.Common.Visuals.IAttackAnimator newValue) {
        var index = GameComponentsLookup.AttackAnimator;
        var component = (Code.Features.Statuses.Components.AttackAnimatorComponent)CreateComponent(index, typeof(Code.Features.Statuses.Components.AttackAnimatorComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveAttackAnimator() {
        RemoveComponent(GameComponentsLookup.AttackAnimator);
        return this;
    }
}
