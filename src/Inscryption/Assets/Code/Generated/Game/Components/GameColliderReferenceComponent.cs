//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherColliderReference;

    public static Entitas.IMatcher<GameEntity> ColliderReference {
        get {
            if (_matcherColliderReference == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.ColliderReference);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherColliderReference = matcher;
            }

            return _matcherColliderReference;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Common.ColliderReference colliderReference { get { return (Code.Common.ColliderReference)GetComponent(GameComponentsLookup.ColliderReference); } }
    public UnityEngine.Collider ColliderReference { get { return colliderReference.Value; } }
    public bool hasColliderReference { get { return HasComponent(GameComponentsLookup.ColliderReference); } }

    public GameEntity AddColliderReference(UnityEngine.Collider newValue) {
        var index = GameComponentsLookup.ColliderReference;
        var component = (Code.Common.ColliderReference)CreateComponent(index, typeof(Code.Common.ColliderReference));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceColliderReference(UnityEngine.Collider newValue) {
        var index = GameComponentsLookup.ColliderReference;
        var component = (Code.Common.ColliderReference)CreateComponent(index, typeof(Code.Common.ColliderReference));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveColliderReference() {
        RemoveComponent(GameComponentsLookup.ColliderReference);
        return this;
    }
}
