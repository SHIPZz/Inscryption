//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherCardHorizontalOffset;

    public static Entitas.IMatcher<GameEntity> CardHorizontalOffset {
        get {
            if (_matcherCardHorizontalOffset == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.CardHorizontalOffset);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherCardHorizontalOffset = matcher;
            }

            return _matcherCardHorizontalOffset;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Features.Hero.CardHorizontalOffset cardHorizontalOffset { get { return (Code.Features.Hero.CardHorizontalOffset)GetComponent(GameComponentsLookup.CardHorizontalOffset); } }
    public float CardHorizontalOffset { get { return cardHorizontalOffset.Value; } }
    public bool hasCardHorizontalOffset { get { return HasComponent(GameComponentsLookup.CardHorizontalOffset); } }

    public GameEntity AddCardHorizontalOffset(float newValue) {
        var index = GameComponentsLookup.CardHorizontalOffset;
        var component = (Code.Features.Hero.CardHorizontalOffset)CreateComponent(index, typeof(Code.Features.Hero.CardHorizontalOffset));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceCardHorizontalOffset(float newValue) {
        var index = GameComponentsLookup.CardHorizontalOffset;
        var component = (Code.Features.Hero.CardHorizontalOffset)CreateComponent(index, typeof(Code.Features.Hero.CardHorizontalOffset));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveCardHorizontalOffset() {
        RemoveComponent(GameComponentsLookup.CardHorizontalOffset);
        return this;
    }
}
