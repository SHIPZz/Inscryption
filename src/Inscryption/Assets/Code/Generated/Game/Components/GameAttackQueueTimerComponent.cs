//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherAttackQueueTimer;

    public static Entitas.IMatcher<GameEntity> AttackQueueTimer {
        get {
            if (_matcherAttackQueueTimer == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.AttackQueueTimer);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherAttackQueueTimer = matcher;
            }

            return _matcherAttackQueueTimer;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Features.Turn.AttackQueueTimer attackQueueTimer { get { return (Code.Features.Turn.AttackQueueTimer)GetComponent(GameComponentsLookup.AttackQueueTimer); } }
    public bool hasAttackQueueTimer { get { return HasComponent(GameComponentsLookup.AttackQueueTimer); } }

    public GameEntity AddAttackQueueTimer(float newElapsedTime, float newDelayBetweenAttacks, int newCurrentAttackIndex, float newPostAttackDelay, bool newAllAttacksComplete) {
        var index = GameComponentsLookup.AttackQueueTimer;
        var component = (Code.Features.Turn.AttackQueueTimer)CreateComponent(index, typeof(Code.Features.Turn.AttackQueueTimer));
        component.ElapsedTime = newElapsedTime;
        component.DelayBetweenAttacks = newDelayBetweenAttacks;
        component.CurrentAttackIndex = newCurrentAttackIndex;
        component.PostAttackDelay = newPostAttackDelay;
        component.AllAttacksComplete = newAllAttacksComplete;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceAttackQueueTimer(float newElapsedTime, float newDelayBetweenAttacks, int newCurrentAttackIndex, float newPostAttackDelay, bool newAllAttacksComplete) {
        var index = GameComponentsLookup.AttackQueueTimer;
        var component = (Code.Features.Turn.AttackQueueTimer)CreateComponent(index, typeof(Code.Features.Turn.AttackQueueTimer));
        component.ElapsedTime = newElapsedTime;
        component.DelayBetweenAttacks = newDelayBetweenAttacks;
        component.CurrentAttackIndex = newCurrentAttackIndex;
        component.PostAttackDelay = newPostAttackDelay;
        component.AllAttacksComplete = newAllAttacksComplete;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveAttackQueueTimer() {
        RemoveComponent(GameComponentsLookup.AttackQueueTimer);
        return this;
    }
}
