//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherSelectedCards;

    public static Entitas.IMatcher<GameEntity> SelectedCards {
        get {
            if (_matcherSelectedCards == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.SelectedCards);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherSelectedCards = matcher;
            }

            return _matcherSelectedCards;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity selectedCardsEntity { get { return GetGroup(GameMatcher.SelectedCards).GetSingleEntity(); } }
    public Code.Common.SelectedCards selectedCards { get { return selectedCardsEntity.selectedCards; } }
    public System.Collections.Generic.List<int> SelectedCards { get { return selectedCards.Value; } }
    public bool hasSelectedCards { get { return selectedCardsEntity != null; } }

    public GameEntity SetSelectedCards(System.Collections.Generic.List<int> newValue) {
        if (hasSelectedCards) {
            throw new Entitas.EntitasException("Could not set SelectedCards!\n" + this + " already has an entity with Code.Common.SelectedCards!",
                "You should check if the context already has a selectedCardsEntity before setting it or use context.ReplaceSelectedCards().");
        }
        var entity = CreateEntity();
        entity.AddSelectedCards(newValue);
        return entity;
    }

    public void ReplaceSelectedCards(System.Collections.Generic.List<int> newValue) {
        var entity = selectedCardsEntity;
        if (entity == null) {
            entity = SetSelectedCards(newValue);
        } else {
            entity.ReplaceSelectedCards(newValue);
        }
    }

    public void RemoveSelectedCards() {
        selectedCardsEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Common.SelectedCards selectedCards { get { return (Code.Common.SelectedCards)GetComponent(GameComponentsLookup.SelectedCards); } }
    public System.Collections.Generic.List<int> SelectedCards { get { return selectedCards.Value; } }
    public bool hasSelectedCards { get { return HasComponent(GameComponentsLookup.SelectedCards); } }

    public GameEntity AddSelectedCards(System.Collections.Generic.List<int> newValue) {
        var index = GameComponentsLookup.SelectedCards;
        var component = (Code.Common.SelectedCards)CreateComponent(index, typeof(Code.Common.SelectedCards));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceSelectedCards(System.Collections.Generic.List<int> newValue) {
        var index = GameComponentsLookup.SelectedCards;
        var component = (Code.Common.SelectedCards)CreateComponent(index, typeof(Code.Common.SelectedCards));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveSelectedCards() {
        RemoveComponent(GameComponentsLookup.SelectedCards);
        return this;
    }
}
