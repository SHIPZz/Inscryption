//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherRenderer;

    public static Entitas.IMatcher<GameEntity> Renderer {
        get {
            if (_matcherRenderer == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.Renderer);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherRenderer = matcher;
            }

            return _matcherRenderer;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Common.RendererComponent renderer { get { return (Code.Common.RendererComponent)GetComponent(GameComponentsLookup.Renderer); } }
    public UnityEngine.Renderer Renderer { get { return renderer.Value; } }
    public bool hasRenderer { get { return HasComponent(GameComponentsLookup.Renderer); } }

    public GameEntity AddRenderer(UnityEngine.Renderer newValue) {
        var index = GameComponentsLookup.Renderer;
        var component = (Code.Common.RendererComponent)CreateComponent(index, typeof(Code.Common.RendererComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceRenderer(UnityEngine.Renderer newValue) {
        var index = GameComponentsLookup.Renderer;
        var component = (Code.Common.RendererComponent)CreateComponent(index, typeof(Code.Common.RendererComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveRenderer() {
        RemoveComponent(GameComponentsLookup.Renderer);
        return this;
    }
}
