//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherSlotId;

    public static Entitas.IMatcher<GameEntity> SlotId {
        get {
            if (_matcherSlotId == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.SlotId);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherSlotId = matcher;
            }

            return _matcherSlotId;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Features.Cards.SlotId slotId { get { return (Code.Features.Cards.SlotId)GetComponent(GameComponentsLookup.SlotId); } }
    public int SlotId { get { return slotId.Value; } }
    public bool hasSlotId { get { return HasComponent(GameComponentsLookup.SlotId); } }

    public GameEntity AddSlotId(int newValue) {
        var index = GameComponentsLookup.SlotId;
        var component = (Code.Features.Cards.SlotId)CreateComponent(index, typeof(Code.Features.Cards.SlotId));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceSlotId(int newValue) {
        var index = GameComponentsLookup.SlotId;
        var component = (Code.Features.Cards.SlotId)CreateComponent(index, typeof(Code.Features.Cards.SlotId));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveSlotId() {
        RemoveComponent(GameComponentsLookup.SlotId);
        return this;
    }
}
