//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherCurrentTurnPhase;

    public static Entitas.IMatcher<GameEntity> CurrentTurnPhase {
        get {
            if (_matcherCurrentTurnPhase == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.CurrentTurnPhase);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherCurrentTurnPhase = matcher;
            }

            return _matcherCurrentTurnPhase;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Features.Turn.CurrentTurnPhase currentTurnPhase { get { return (Code.Features.Turn.CurrentTurnPhase)GetComponent(GameComponentsLookup.CurrentTurnPhase); } }
    public bool hasCurrentTurnPhase { get { return HasComponent(GameComponentsLookup.CurrentTurnPhase); } }

    public GameEntity AddCurrentTurnPhase(Code.Features.Turn.TurnPhase newPhase) {
        var index = GameComponentsLookup.CurrentTurnPhase;
        var component = (Code.Features.Turn.CurrentTurnPhase)CreateComponent(index, typeof(Code.Features.Turn.CurrentTurnPhase));
        component.Phase = newPhase;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceCurrentTurnPhase(Code.Features.Turn.TurnPhase newPhase) {
        var index = GameComponentsLookup.CurrentTurnPhase;
        var component = (Code.Features.Turn.CurrentTurnPhase)CreateComponent(index, typeof(Code.Features.Turn.CurrentTurnPhase));
        component.Phase = newPhase;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveCurrentTurnPhase() {
        RemoveComponent(GameComponentsLookup.CurrentTurnPhase);
        return this;
    }
}
