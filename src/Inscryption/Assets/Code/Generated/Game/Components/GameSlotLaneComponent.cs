//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherSlotLane;

    public static Entitas.IMatcher<GameEntity> SlotLane {
        get {
            if (_matcherSlotLane == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.SlotLane);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherSlotLane = matcher;
            }

            return _matcherSlotLane;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Features.Board.SlotLane slotLane { get { return (Code.Features.Board.SlotLane)GetComponent(GameComponentsLookup.SlotLane); } }
    public int SlotLane { get { return slotLane.Value; } }
    public bool hasSlotLane { get { return HasComponent(GameComponentsLookup.SlotLane); } }

    public GameEntity AddSlotLane(int newValue) {
        var index = GameComponentsLookup.SlotLane;
        var component = (Code.Features.Board.SlotLane)CreateComponent(index, typeof(Code.Features.Board.SlotLane));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceSlotLane(int newValue) {
        var index = GameComponentsLookup.SlotLane;
        var component = (Code.Features.Board.SlotLane)CreateComponent(index, typeof(Code.Features.Board.SlotLane));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveSlotLane() {
        RemoveComponent(GameComponentsLookup.SlotLane);
        return this;
    }
}
